// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// admm_MADMMplasso_cpp
arma::field<arma::cube> admm_MADMMplasso_cpp(arma::vec beta0, arma::mat theta0, arma::mat beta, arma::mat beta_hat, arma::cube theta, const double rho1, const arma::mat X, const arma::mat Z, const int max_it, const arma::mat W_hat, arma::mat XtY, const arma::mat y, const int N, const double e_abs, const double e_rel, const double alpha, const arma::vec lambda, const double alph, const arma::mat svd_w_tu, const arma::mat svd_w_tv, const arma::vec svd_w_d, const arma::sp_mat C, const arma::vec CW, const arma::rowvec gg, const bool my_print);
RcppExport SEXP _MADMMplasso_admm_MADMMplasso_cpp(SEXP beta0SEXP, SEXP theta0SEXP, SEXP betaSEXP, SEXP beta_hatSEXP, SEXP thetaSEXP, SEXP rho1SEXP, SEXP XSEXP, SEXP ZSEXP, SEXP max_itSEXP, SEXP W_hatSEXP, SEXP XtYSEXP, SEXP ySEXP, SEXP NSEXP, SEXP e_absSEXP, SEXP e_relSEXP, SEXP alphaSEXP, SEXP lambdaSEXP, SEXP alphSEXP, SEXP svd_w_tuSEXP, SEXP svd_w_tvSEXP, SEXP svd_w_dSEXP, SEXP CSEXP, SEXP CWSEXP, SEXP ggSEXP, SEXP my_printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta_hat(beta_hatSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type W_hat(W_hatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XtY(XtYSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type e_abs(e_absSEXP);
    Rcpp::traits::input_parameter< const double >::type e_rel(e_relSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alph(alphSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type svd_w_tu(svd_w_tuSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type svd_w_tv(svd_w_tvSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type svd_w_d(svd_w_dSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type CW(CWSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type gg(ggSEXP);
    Rcpp::traits::input_parameter< const bool >::type my_print(my_printSEXP);
    rcpp_result_gen = Rcpp::wrap(admm_MADMMplasso_cpp(beta0, theta0, beta, beta_hat, theta, rho1, X, Z, max_it, W_hat, XtY, y, N, e_abs, e_rel, alpha, lambda, alph, svd_w_tu, svd_w_tv, svd_w_d, C, CW, gg, my_print));
    return rcpp_result_gen;
END_RCPP
}
// count_nonzero_a_cpp
int count_nonzero_a_cpp(SEXP x);
RcppExport SEXP _MADMMplasso_count_nonzero_a_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(count_nonzero_a_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// count_nonzero_a_sp_mat
int count_nonzero_a_sp_mat(arma::sp_mat x);
RcppExport SEXP _MADMMplasso_count_nonzero_a_sp_mat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(count_nonzero_a_sp_mat(x));
    return rcpp_result_gen;
END_RCPP
}
// count_nonzero_a_cube
int count_nonzero_a_cube(arma::cube x);
RcppExport SEXP _MADMMplasso_count_nonzero_a_cube(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(count_nonzero_a_cube(x));
    return rcpp_result_gen;
END_RCPP
}
// count_nonzero_a_mat
int count_nonzero_a_mat(arma::mat x);
RcppExport SEXP _MADMMplasso_count_nonzero_a_mat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(count_nonzero_a_mat(x));
    return rcpp_result_gen;
END_RCPP
}
// hh_nlambda_loop_cpp
Rcpp::List hh_nlambda_loop_cpp(const arma::mat lam, const unsigned int nlambda, arma::vec beta0, arma::mat theta0, arma::mat beta, arma::mat beta_hat, arma::cube theta, const double rho1, const arma::mat X, const arma::mat Z, const int max_it, const arma::mat my_W_hat, const arma::mat XtY, const arma::mat y, const int N, const double e_abs, const double e_rel, const double alpha, const double alph, const bool my_print, const arma::mat gg, const double tol, const bool parallel, const bool pal, arma::cube BETA0, arma::cube THETA0, arma::cube BETA, arma::cube BETA_hat, arma::cube Y_HAT, const unsigned int D, const arma::sp_mat C, const arma::vec CW, const arma::mat svd_w_tu, const arma::mat svd_w_tv, const arma::vec svd_w_d, Rcpp::List my_values);
RcppExport SEXP _MADMMplasso_hh_nlambda_loop_cpp(SEXP lamSEXP, SEXP nlambdaSEXP, SEXP beta0SEXP, SEXP theta0SEXP, SEXP betaSEXP, SEXP beta_hatSEXP, SEXP thetaSEXP, SEXP rho1SEXP, SEXP XSEXP, SEXP ZSEXP, SEXP max_itSEXP, SEXP my_W_hatSEXP, SEXP XtYSEXP, SEXP ySEXP, SEXP NSEXP, SEXP e_absSEXP, SEXP e_relSEXP, SEXP alphaSEXP, SEXP alphSEXP, SEXP my_printSEXP, SEXP ggSEXP, SEXP tolSEXP, SEXP parallelSEXP, SEXP palSEXP, SEXP BETA0SEXP, SEXP THETA0SEXP, SEXP BETASEXP, SEXP BETA_hatSEXP, SEXP Y_HATSEXP, SEXP DSEXP, SEXP CSEXP, SEXP CWSEXP, SEXP svd_w_tuSEXP, SEXP svd_w_tvSEXP, SEXP svd_w_dSEXP, SEXP my_valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta_hat(beta_hatSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type my_W_hat(my_W_hatSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type XtY(XtYSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type e_abs(e_absSEXP);
    Rcpp::traits::input_parameter< const double >::type e_rel(e_relSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type alph(alphSEXP);
    Rcpp::traits::input_parameter< const bool >::type my_print(my_printSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type gg(ggSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< const bool >::type pal(palSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type BETA0(BETA0SEXP);
    Rcpp::traits::input_parameter< arma::cube >::type THETA0(THETA0SEXP);
    Rcpp::traits::input_parameter< arma::cube >::type BETA(BETASEXP);
    Rcpp::traits::input_parameter< arma::cube >::type BETA_hat(BETA_hatSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y_HAT(Y_HATSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type D(DSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type CW(CWSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type svd_w_tu(svd_w_tuSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type svd_w_tv(svd_w_tvSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type svd_w_d(svd_w_dSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type my_values(my_valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(hh_nlambda_loop_cpp(lam, nlambda, beta0, theta0, beta, beta_hat, theta, rho1, X, Z, max_it, my_W_hat, XtY, y, N, e_abs, e_rel, alpha, alph, my_print, gg, tol, parallel, pal, BETA0, THETA0, BETA, BETA_hat, Y_HAT, D, C, CW, svd_w_tu, svd_w_tv, svd_w_d, my_values));
    return rcpp_result_gen;
END_RCPP
}
// model_intercept
arma::mat model_intercept(const arma::mat beta, const arma::mat X);
RcppExport SEXP _MADMMplasso_model_intercept(SEXP betaSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(model_intercept(beta, X));
    return rcpp_result_gen;
END_RCPP
}
// model_p
arma::mat model_p(const arma::vec beta0, const arma::mat theta0, const arma::mat beta, const arma::mat X, const arma::mat Z);
RcppExport SEXP _MADMMplasso_model_p(SEXP beta0SEXP, SEXP theta0SEXP, SEXP betaSEXP, SEXP XSEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Z(ZSEXP);
    rcpp_result_gen = Rcpp::wrap(model_p(beta0, theta0, beta, X, Z));
    return rcpp_result_gen;
END_RCPP
}
// modulo
arma::uvec modulo(arma::uvec x, int n);
RcppExport SEXP _MADMMplasso_modulo(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(modulo(x, n));
    return rcpp_result_gen;
END_RCPP
}
// multiples_of
arma::ivec multiples_of(arma::ivec x, const int divisor, const bool subset_out);
RcppExport SEXP _MADMMplasso_multiples_of(SEXP xSEXP, SEXP divisorSEXP, SEXP subset_outSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ivec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type divisor(divisorSEXP);
    Rcpp::traits::input_parameter< const bool >::type subset_out(subset_outSEXP);
    rcpp_result_gen = Rcpp::wrap(multiples_of(x, divisor, subset_out));
    return rcpp_result_gen;
END_RCPP
}
// lm_arma
arma::vec lm_arma(const arma::vec& R, const arma::mat& Z);
RcppExport SEXP _MADMMplasso_lm_arma(SEXP RSEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    rcpp_result_gen = Rcpp::wrap(lm_arma(R, Z));
    return rcpp_result_gen;
END_RCPP
}
// reg
arma::mat reg(const arma::mat r, const arma::mat Z);
RcppExport SEXP _MADMMplasso_reg(SEXP rSEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Z(ZSEXP);
    rcpp_result_gen = Rcpp::wrap(reg(r, Z));
    return rcpp_result_gen;
END_RCPP
}
// scale_cpp
arma::mat scale_cpp(arma::mat x, arma::vec scale);
RcppExport SEXP _MADMMplasso_scale_cpp(SEXP xSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(scale_cpp(x, scale));
    return rcpp_result_gen;
END_RCPP
}
// sqrt_sum_squared_rows
arma::vec sqrt_sum_squared_rows(arma::mat x);
RcppExport SEXP _MADMMplasso_sqrt_sum_squared_rows(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sqrt_sum_squared_rows(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MADMMplasso_admm_MADMMplasso_cpp", (DL_FUNC) &_MADMMplasso_admm_MADMMplasso_cpp, 25},
    {"_MADMMplasso_count_nonzero_a_cpp", (DL_FUNC) &_MADMMplasso_count_nonzero_a_cpp, 1},
    {"_MADMMplasso_count_nonzero_a_sp_mat", (DL_FUNC) &_MADMMplasso_count_nonzero_a_sp_mat, 1},
    {"_MADMMplasso_count_nonzero_a_cube", (DL_FUNC) &_MADMMplasso_count_nonzero_a_cube, 1},
    {"_MADMMplasso_count_nonzero_a_mat", (DL_FUNC) &_MADMMplasso_count_nonzero_a_mat, 1},
    {"_MADMMplasso_hh_nlambda_loop_cpp", (DL_FUNC) &_MADMMplasso_hh_nlambda_loop_cpp, 36},
    {"_MADMMplasso_model_intercept", (DL_FUNC) &_MADMMplasso_model_intercept, 2},
    {"_MADMMplasso_model_p", (DL_FUNC) &_MADMMplasso_model_p, 5},
    {"_MADMMplasso_modulo", (DL_FUNC) &_MADMMplasso_modulo, 2},
    {"_MADMMplasso_multiples_of", (DL_FUNC) &_MADMMplasso_multiples_of, 3},
    {"_MADMMplasso_lm_arma", (DL_FUNC) &_MADMMplasso_lm_arma, 2},
    {"_MADMMplasso_reg", (DL_FUNC) &_MADMMplasso_reg, 2},
    {"_MADMMplasso_scale_cpp", (DL_FUNC) &_MADMMplasso_scale_cpp, 2},
    {"_MADMMplasso_sqrt_sum_squared_rows", (DL_FUNC) &_MADMMplasso_sqrt_sum_squared_rows, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_MADMMplasso(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
